<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Video</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/Livedebater-page.css">
</head>
<body>
    <section>
        <div class="container">
            <!-- Video Player Section -->
            <div class="player">
                <div class="local-video">
                    <video id="localVideo" autoplay muted playsinline></video>
                </div>
                <div class="remote-video">
                    <video id="remoteVideo" autoplay muted playsinline></video>
                    <!-- End Call Button inside the remote-video div -->
                    <button class="end-call-btn">End Call</button>
                </div>
            </div>

            <!-- About Video Section -->
            <div class="about-video">
                <!-- Title has been changed from "Followers" to "Live Comments" -->
                <div class="single-comment">
                    <strong>Shyam:</strong> 
                    <p>Daro Mat Mitr!</p>
                </div>
                <div class="single-comment">
                    <strong>Rohit:</strong> 
                    <p>Amazing Video!</p>
                </div>
            </div>
        </div>
    </section>
</body>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io(); // Connect to the signaling server
const configuration = {
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
};
let localStream = null;
let peerConnections = {};

// Get user media (camera and microphone)
async function initLocalStream() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        const localVideo = document.getElementById("remoteVideo");
        localVideo.srcObject = localStream;
        localVideo.play();
        console.log("Local stream initialized.");
    } catch (error) {
        console.error("Error accessing media devices:", error);
    }
}

// Create a new RTCPeerConnection for a peer
function createPeerConnection(peerId, localStream = null) {
    if (peerConnections[peerId]) {
        console.log(`Peer connection for ${peerId} already exists.`);
        return peerConnections[peerId];
    }

    console.log(`Creating peer connection for ${peerId}`);
    const peerConnection = new RTCPeerConnection(configuration);
    peerConnections[peerId] = peerConnection;

    if (localStream) {
        localStream.getTracks().forEach((track) => {
            peerConnection.addTrack(track, localStream);
        });
    }

    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            socket.emit("signal", { data: { candidate: event.candidate }, sender: socket.id, target: peerId });
        }
    };

    peerConnection.ontrack = (event) => {
        console.log("Received remote track for", peerId);
        const remoteVideo = document.getElementById("localVideo");
        if (!remoteVideo.srcObject) {
            remoteVideo.srcObject = event.streams[0];
        }
    };

    return peerConnection;
}

// Create an offer for a peer
async function createOffer(peerId) {
    console.log(`Creating offer for ${peerId}`);
    const peerConnection = peerConnections[peerId];
    if (!peerConnection) {
        console.error(`Peer connection for ${peerId} not found!`);
        return;
    }

    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);
    socket.emit("signal", { data: { sdp: peerConnection.localDescription }, sender: socket.id, target: peerId });
}

// Handle incoming signals (SDP and ICE candidates)
async function handleSignal({ data, sender }) {
    let peerConnection = peerConnections[sender];
    if (!peerConnection) {
        console.log(`Peer connection for ${sender} does not exist, creating it now.`);
        peerConnection = createPeerConnection(sender, localStream);
    }

    if (data.sdp) {
        console.log("Received SDP:", data.sdp.type);
        await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
        if (data.sdp.type === "offer") {
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            socket.emit("signal", { data: { sdp: peerConnection.localDescription }, sender: socket.id, target: sender });
        }
    } else if (data.candidate) {
        console.log("Received ICE candidate.");
        await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
    }
}

// Handle user joining
socket.on("user-joined", (peerId) => {
    console.log("User joined:", peerId);

    if (!peerConnections[peerId]) {
        createPeerConnection(peerId, localStream);
    }

    createOffer(peerId);
});

// Handle signal
socket.on("signal", handleSignal);

// Handle user leaving
socket.on("user-left", (peerId) => {
    console.log("User left:", peerId);
    if (peerConnections[peerId]) {
        peerConnections[peerId].close();
        delete peerConnections[peerId];
    }
});

// Initialize
async function initialize() {
    await initLocalStream();

    socket.emit("join-room", { roomId: "your-room-id" }); // Replace with dynamic room ID
}

initialize();

</script>
</html>
