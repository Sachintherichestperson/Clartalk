<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Video</title>
    <link rel="stylesheet" href="/stylesheets/live-player.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <section>
        <div class="container">
            <div class="player">
                <div class="local-video">
                    <video id="localVideo" autoplay muted playsinline></video>
                </div>
                <div class="remote-video">
                    <label class="comment-btn" for="commentsToggle">
                        <i class="fas fa-comment comment-i"></i> 
                    </label>
                    <video id="remoteVideo" autoplay muted playsinline></video>
                    <% if(isCreator || ){ %>
                    <!-- End Call Button inside the remote-video div -->
                    <button class="end-call-btn">End Call</button>
                    <% } %>
                </div>
            </div>
            <% if(isViewer){ %>
            <div class="about-video">
                <p class="title"><%= Live.title %></p>
                <div class="description">
                    <p><%= Live.description %></p>
                </div>
            <% } %>
            </div>
            <% if(isViewer){ %>
            <div class="video-user-info">
                <img src="/images/Default.png" alt="Default Avatar" class="user-avatar">
                <div class="creator-details">
                    <a href="/creator/creator" class="creator-name">
                        Creator Username
                    </a>
                    <p class="followers-count"><%= follower %> Followers</p>
                </div>
            <% } %>
                <% if(isViewer){ %>
                <% if (isFollowing) { %>
                    <button class="unfollow" data-creator-id="<%= Live.creator[0]._id %>" id="follow-btn">Unfollow</button>
                <% } else { %>
                    <button class="follow" data-creator-id="<%= Live.creator[0]._id %>" id="follow-btn">follow</button>
                <% } %>
                <% } %>
            </div> 
        </div>
        <% if(isCreator || isOpponent){ %>
            <button class="start-stream-btn">Start Stream</button>
            <% } %>
        </div>
        <% if(isViewer){ %>
        <input type="checkbox" id="commentsToggle" class="comments-toggle" hidden>
        <div class="comments">
            <div class="comment-list">
                    <li class="single-comment">
                        <strong>Krishna tera Shaka : </strong>
                        <p>Me hu Daro Mat Sachin, Tum Bus Mehnat Karte Raho aur mere Priyata ka nam lete Raho, Aur Jo Tum Kar Rahe Ho Wo Karte Raho</p>
                    </li>
            </div>
            <div class="comment-input">
                <input type="text" placeholder="Add a comment" id="commentInput">
                <button id="commentButton">Comment</button>
            </div>
            <% } %>
            </div>
    </section>
<script src="/javascript/main.js"></script>
<script src="/javascript/socket.io.js"></script>
<script>
    const button = document.querySelector(".start-stream-btn");
    const socket = io(); // Connect to the signaling server
    const configuration = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };
    let localStream = null;
    let peerConnections = {};
    let isStreamer = false; // Default is viewer
    let roomId = "<%= RoomId %>"; // Replace with dynamic room ID

    // Get user media (streamer's video and audio)
    async function initLocalStream() {
        try {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            const localVideo = document.getElementById("localVideo");
            localVideo.srcObject = localStream;
            localVideo.play();
            console.log("Local stream initialized.");
        } catch (error) {
            console.error("Error accessing media devices:", error);
        }
    }

    // Create a new RTCPeerConnection for a peer
    function createPeerConnection(peerId, isLocal) {
        if (peerConnections[peerId]) {
            console.log(`Peer connection for ${peerId} already exists.`);
            return peerConnections[peerId];
        }

        console.log(`Creating peer connection for ${peerId}`);
        const peerConnection = new RTCPeerConnection(configuration);
        peerConnections[peerId] = peerConnection;

        // Attach local stream for streamer
        if (isStreamer && localStream) {
            localStream.getTracks().forEach((track) => {
                peerConnection.addTrack(track, localStream);
            });
        };

        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit("signal", { data: { candidate: event.candidate }, sender: socket.id, target: peerId });
            }
        };

        peerConnection.ontrack = (event) => {
    console.log("Received remote track for", peerId);
    const remoteVideo = document.getElementById("remoteVideo");
    const localVideo = document.getElementById("localVideo");

    if (!remoteVideo.srcObject) {
        remoteVideo.srcObject = event.streams[0];  // Assign the remote stream to the remote video element
        console.log(`Assigned stream for peer: ${peerId} to remoteVideo`);
    } else if (!localVideo.srcObject) {
        localVideo.srcObject = event.streams[0];  // Assign the remote stream to the local video element
        console.log(`Assigned stream for peer: ${peerId} to localVideo`);
    }
};
        
        return peerConnection;
    }

    // Handle incoming signals (SDP and ICE candidates)
    async function handleSignal({ data, sender }) {
        let peerConnection = peerConnections[sender];
        if (!peerConnection) {
            console.log(`Peer connection for ${sender} does not exist, creating it now.`);
            peerConnection = createPeerConnection(sender);
        }

        if (data.sdp) {
            console.log("Received SDP:", data.sdp.type);
            await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
            if (data.sdp.type === "offer") {
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                socket.emit("signal", { data: { sdp: peerConnection.localDescription }, sender: socket.id, target: sender });
            }
        } else if (data.candidate) {
            console.log("Received ICE candidate.");
            await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        }
    }

    // Initialize for Streamers
    async function initializeStream() {
        await initLocalStream();
        isStreamer = true;
        socket.emit("start-stream", { roomId }); // Notify the server that the stream has started
    }

    // Initialize for Viewers
    function initializeViewer() {
        isStreamer = false;
        const localVideo = document.getElementById("localVideo");
        console.log("Viewer joined, setting up local video.")
        
        socket.emit("join-room", { roomId }); // Viewers join the room
    }

    // Handle user joining
    socket.on("user-joined", (peerId) => {
        console.log("User joined:", peerId);

        if (isStreamer && !peerConnections[peerId]) {
            createPeerConnection(peerId, true);  // For remote peer
            createOffer(peerId);
        }

        if (!isStreamer && !peerConnections[peerId]) {
            createPeerConnection(peerId, true);  // For local peer
            createOffer(peerId);  // Viewer will make an offer to the streamer
        }
    });

    // Handle stream started (when both streamers are in the room)
    socket.on("stream-started", (peerId) => {
        console.log("Stream started by peer:", peerId);
        if (!peerConnections[peerId]) {
            createPeerConnection(peerId, false);
            createOffer(peerId);
        }
    });

    // Handle user leaving
    socket.on("user-left", (peerId) => {
        console.log("User left:", peerId);
        if (peerConnections[peerId]) {
            peerConnections[peerId].close();
            delete peerConnections[peerId];
        }
    });

    // Create an offer for a peer
    async function createOffer(peerId) {
        console.log(`Creating offer for ${peerId}`);
        const peerConnection = peerConnections[peerId];
        if (!peerConnection) {
            console.error(`Peer connection for ${peerId} not found!`);
            return;
        }

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit("signal", { data: { sdp: peerConnection.localDescription }, sender: socket.id, target: peerId });
    }

    // Handle signal
    socket.on("signal", handleSignal);

    // Event Listeners
    button?.addEventListener("click", () => {
        initializeStream();
    });

    // Initialize viewer if source is "link"
    if (window.location.search.includes("source=link")) {
        initializeViewer();
    }

</script>
</body>
</html>
